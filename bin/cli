#!/usr/bin/env node

"use strict";

const net = require("net");
const path = require("path");
const stream = require("stream");
const fs = require("fs");
const program = require("commander");
const schedule = require("../lib/scheduler");
const pkg = require("../package.json");
const ipHelper = require("ip-helper");

const DEFAULT_SCAN_RESULT_FILENAME = "scan-result.txt";
const DEFAULT_TEST_SERVER_NAME = ["www.baidu.com", "www.google.com"];
const DEFAULT_PARALLELS = 8;
const DEFAULT_TIMEOUT = 10000; // 10s

let ipList;

program
    .version(pkg.version)
    .usage("[options] [ip ...]")
    .option("-i, --in <file>", "指定 ip 列表文件，如果未指定，默认使用 stdin")
    .option("-o, --out <file>", "输出可用的 SNI IP 列表文件，如果未指定，默认输出到 stdout")
    .option("-c, --continue [file]", `保存扫描记录，可用于中断后恢复，默认为：$PWD/${DEFAULT_SCAN_RESULT_FILENAME}`)
    .option("-p, --parallels [number]", `并行扫描数，默认为 ${DEFAULT_PARALLELS}`)
    .option("-t, --tests [servernames]", `测试的 SNI 域名，默认为 ${DEFAULT_TEST_SERVER_NAME.join(",")}`)
    .option("--timeout <seconds>", `设置超时时间，如果未设置，默认为 ${DEFAULT_TIMEOUT}ms`)
    .option("--silent", "安静模式，如果启用，则不在终端输出扫描过程")
    .option("--verbose", "显示详细的错误信息")
    .arguments("[ip...]")
    .action(function (ips) {
        for (const ip of ips) {
            if (net.isIP(ip) !== 4 && !ipHelper.isIPRange(ip)) {
                console.error(`${ip} 不是一个有效的 IP 或 IP range`);
                process.exit(1);
            }
        }
        ipList = ips;
    })
    .parse(process.argv);

const isStdinTTY = process.stdin.isTTY;
const input = (() => {
    if (program.in) {
        return fs.createReadStream(program.in, {
            encoding: "utf8",
        });
    } else if (ipList) {
        return ipList.join("\n");
    } else {
        return process.stdin;
    }
})();
const isInteractiveMode = input === process.stdin && isStdinTTY;

const output = !isInteractiveMode && program.out && fs.createWriteStream(program.out);

const silent = isInteractiveMode ? false : program.silent;
const verbose = program.verbose;

const [scannedResult, scanLogger] = (function () {
    if (!program.continue) {
        return [new Map(), createBlackHoleStream()];
    }
    const out = program.continue === true ?
        path.join(process.cwd(), DEFAULT_SCAN_RESULT_FILENAME) :
        program.continue;

    let scanned;
    try {
        const str = fs.readFileSync(out, {
            encoding: "utf8",
        });
        const ary = str.split("\n").map(line => {
            return line.split(/,/);
        });
        scanned = new Map(ary);
    } catch (ex) {
        scanned = new Map();
    }
    return [scanned, fs.createWriteStream(out, {
        flags: "a",
    })];

    function createBlackHoleStream() {
        return new stream.Writable({
            write(chunk, encoding, next) {
                next(null);
            },
        });
    }
})();

const parallels = program.parallels || DEFAULT_PARALLELS;

const testDomains = typeof program.tests !== "string" ?
    DEFAULT_TEST_SERVER_NAME : program.tests.split(",");

const timeout = program.timeout ?  parseInt(program.timeout, 10) : DEFAULT_TIMEOUT;

function write(stream, data) {
    return new Promise((resolve, reject) => {
        const ret = stream.write(data);
        if (ret) {
            resolve();
        } else {
            stream.once("drain", resolve);
        }
    });
}

function formmater(text, color) {
    switch (color) {
        case "green":
            return `\u001b[32m${text}\u001b[39m`;
        case "red":
            return `\u001b[31m${text}\u001b[39m`;
        case "yellow":
            return `\u001b[33m${text}\u001b[39m`;
        default:
            return text;
    }
}

function filter(ip) {
    return scannedResult.has(ip);
}

const isStdoutTTY = process.stdout.isTTY;
const isStderrTTY = process.stderr.isTTY;

const observable = schedule(input, testDomains, timeout, parallels, filter);
const subscription = observable.subscribe({
    start() {
        if (isInteractiveMode) {
            console.error("进入交互模式，按 <CTRL+D> 退出程序");
            if (program.out) {
                console.warn("注意，在交互模式下，-o, --out 参数将被忽略");
            }
        }
    },
    next(state) {
        const { ip, success, reason } = state;
        if (success) {
            if (!silent) {
                const text = isStdoutTTY ? `${ip} ${formmater("OK", "green")}` : ip;
                console.log(text);
            }
            if (output) {
                return Promise.all([
                    write(output, `${ip}\n`),
                    write(scanLogger, `${ip},OK\n`),
                ]);
            } else {
                return write(scanLogger, `${ip},OK\n`);
            }
        } else {
            if (!silent) {
                const text = isStderrTTY ?  `${ip} ${formmater("Failure", "red")}` : ip;
                console.error(text);
                if (verbose) {
                    console.error(`${
                        (isStderrTTY ? formmater : v => v)("   Error:", "yellow")
                    } ${String(reason.message || reason).trim()}`);
                }
            }
            return write(scanLogger, `${ip},Failure\n`);
        }
    },
    complete() {
        output && output.end();
        scanLogger.end();
    },
    error(err) {
        output && output.end();
        scanLogger.end();
        console.error(err);
    },
});

process.on("SIGINT", () => {
    if (isInteractiveMode) {
        process.stdin.end();
    }
    subscription.unsubscribe();
});
